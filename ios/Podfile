platform :ios, '12.0'

ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

# Flutter root helper
def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. Run `flutter pub get` first."
  end
  File.foreach(generated_xcode_build_settings_path) do |line|
    m = line.match(/FLUTTER_ROOT\=(.*)/)
    return m[1].strip if m
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}."
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

# ------------------------
# Main target
# ------------------------

target 'Runner' do
  # Flutter eklentileri statik framework olarak kullan
  use_frameworks! :linkage => :static
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))

  post_install do |installer|
    installer.pods_project.targets.each do |target|
      flutter_additional_ios_build_settings(target)

      target.build_configurations.each do |config|
        # Simulator arm64 hariç
        config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
        # Non-modular uyarısını kapat
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        # Tüm target'lar için module tanımını zorla
        config.build_settings['DEFINES_MODULE'] = 'YES'
      end
    end
      next unless File.exist?(header_path) && !File.exist?(modulemap_path)

      File.write(modulemap_path, "module #{pod_name} {\n  umbrella header \"#{header_file}\"\n  export *\n  module * { export * }\n}\n")
      puts "[Podfile] module.modulemap oluşturuldu: #{modulemap_path}"
    end
  end
end
